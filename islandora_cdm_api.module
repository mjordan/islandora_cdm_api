<?php

/**
 * @file
 * The main Islandora CONTENTdm API module file.
 */

// Directory in /tmp where images are cached.
define('ISLANDORA_CDM_API_CACHE_DIR', 'islandora_cdm_api_cache');

/**
 * Implements hook_menu().
 */
function islandora_cdm_api_menu() {
  $items = array();
  $items['admin/islandora/tools/cdm_api'] = array(
    'title' => 'CONTENTdm API Provider',
    'description' => 'Configure the Islandora CONTENTdm API Provider module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_cdm_api_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  // We can't use ordinary menu paths for most of the CONTENTdm API URLs
  // because Drupal menu paths have a maximum of 9 path segments. See
  // https://api.drupal.org/api/drupal/includes!menu.inc/constant/
  // MENU_MAX_PARTS/7. To get around this, we consider everything in
  // the incoming request's query (?c=) to be a single string that we
  // parse to get the "parameters". We can't use ?q= because Drupal uses
  // it already for its parameters.
  $items['cdm/api'] = array(
    'title' => 'CONTENTdm API',
    'page callback' => 'islandora_cdm_api_router',
    'access arguments' => array('access contentdm api'),
    'type' => MENU_CALLBACK,
  );
  $items['cdm/utils/getfile/collection/%/id/%/filename/%'] = array(
    'title' => 'GetFile',
    'page callback' => 'islandora_cdm_api_getfile',
    'page arguments' => array(4, 6, 8),
    'access arguments' => array('access contentdm api'),
    'type' => MENU_CALLBACK,
  );
  $items['cdm/utils/ajaxhelper'] = array(
    'title' => 'GetImage',
    'page callback' => 'islandora_cdm_api_getimage',
    'access arguments' => array('access contentdm api'),
    'type' => MENU_CALLBACK,
  );
  $items['cdm/utils/getstream/collection/%/id/%'] = array(
    'title' => 'GetStream',
    'page callback' => 'islandora_cdm_api_getstream',
    'page arguments' => array(4, 6),
    'access arguments' => array('access contentdm api'),
    'type' => MENU_CALLBACK,
  );
  $items['cdm/utils/getthumbnail/collection/%/id/%'] = array(
    'title' => 'GetThumbnail',
    'page callback' => 'islandora_cdm_api_getthumbnail',
    'page arguments' => array(4, 6),
    'access arguments' => array('access contentdm api'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_cdm_api_permission() {
  return array(
    'access contentdm api' => array(
      'title' => t('Access CONTENTdm API'),
      'description' => t('Access the CONTENTdm API'),
    ),
  );
}

/**
 * Admin settings form builder.
 */
function islandora_cdm_api_admin_settings() {
  $form = array();
  $form['islandora_cdm_api_source_cdm_url'] = array(
    '#title' => t('Source CONTENTdm server hostname'),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => variable_get('islandora_cdm_api_source_cdm_url', 'http://contentdm.example.com'),
    '#description' => t('The hostname of the CONTENTdm server that the Islandora objects were migrated from. Include the "http://" or "https://" but not the trailing slash.'),
    '#maxlength' => 60,
  );
  $form['islandora_cdm_api_identifier_element'] = array(
    '#title' => t('Identifier element in Solr'),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => variable_get('islandora_cdm_api_identifier_element', 'dc.identifier'),
    '#description' => t('The element to specify in the Solr query to find CONTENTdm reference URLs. MODS <identifier> elements get mapped to dc.identifer automatically, so if your MODS stores the CONTENTdm reference URLs there, use dc.identifier.'),
    '#maxlength' => 60,
  );
  $form['islandora_cdm_api_log_requests'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log requests to the CONTENTdm API'),
    '#default_value' => variable_get('islandora_cdm_api_log_requests', 0),
    '#description' => t('Check this option if you want to log all requests
      to the CONTENTdm API.'),
  );
  return system_settings_form($form);
}

/**
 * Routes from query string values to functions.
 *
 * Grabs the query string from the request and passes it off to the appropriate
 * function. We need to use a query string instead of menu path elements since
 * Drupal 7 only allows 9 of these, and dmQuery requires more than that. See
 * https://api.drupal.org/api/drupal/includes!menu.inc/constant/MENU_MAX_PARTS/7
 * for the Drupal menu limitation. So we handle all of the API requests the same
 * way, we route them through a single menu callback.
 */
function islandora_cdm_api_router() {
  $not_recognized_message = t('Your request to the CONTENTdm API was not recognized.');
  // The string we want is the only key ('c') in the query.
  $query = drupal_get_query_parameters();
  if (!isset($query['c'])) {
    return $not_recognized_message;
  }
  $query_string = $query['c'];
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  islandora_cdm_api_log_requests(current_path(), $query_string);
  if (!count($query)) {
    return $not_recognized_message;
  }

  $params = explode('/', $query_string);
  // Get the first item after the question mark and pass the remainder
  // of the exploded string to the switch.
  $verb = array_shift($params);

  switch ($verb) {
    case 'dmGetCollectionsList':
      islandora_cdm_api_dmgetcollectionslist($params);
      break;

    case 'dmGetDublinCoreFieldInfo':
      islandora_cdm_api_dmgetdublincorefieldinfo($params);
      break;

    case 'dmGetCollectionFieldInfo':
      islandora_cdm_api_dmgetcollectionfieldinfo($params);
      break;

    case 'dmGetCollectionParameters':
      islandora_cdm_api_dmgetcollectionparameters($params);
      break;

    case 'dmGetCompoundObjectInfo':
      islandora_cdm_api_dmgetcompoundobjectinfo($params);
      break;

    case 'dmGetImageInfo':
      islandora_cdm_api_dmgetimageinfo($params);
      break;

    case 'dmGetItemInfo':
      islandora_cdm_api_dmgetiteminfo($params);
      break;

    case 'dmQuery':
      islandora_cdm_api_dmquery($params);
      break;

    case 'GetItemDmmodified':
      islandora_cdm_api_getitemdmmodified($params);
      break;

    case 'GetParent':
      islandora_cdm_api_getparent($params);
      break;

    default:
      return $not_recognized_message;
  }
}

/**
 * CONTENTdm API callback.
 *
 * Note that this function does not populate 'path' or
 * 'remote' elements.
 *
 * @param array $params
 *   An array containing the format.
 */
function islandora_cdm_api_dmgetcollectionslist(array $params) {
  if ($params[0] == 'xml') {
    drupal_add_http_header('Content-Type', 'text/xml');
    // @todo: Construct the XML and print it.
  }
  if ($params[0] == 'json') {
    drupal_add_http_header('Content-Type', 'application/json');
    // @todo: Construct the JSON and print it.
  }
}

/**
 * CONTENTdm API callback.
 *
 * @param array $params
 *   An array containing the format.
 */
function islandora_cdm_api_dmgetdublincorefieldinfo(array $params) {
  $path = drupal_get_path('module', 'islandora_cdm_api');
  if ($params[0] == 'xml') {
    $path_to_file = $path . '/includes/dmGetDublinCoreFieldInfo.xml';
    $xml = file_get_contents($path_to_file);
    drupal_add_http_header('Content-Type', 'text/xml; utf-8');
    print $xml;
  }
  if ($params[0] == 'json') {
    $path_to_file = $path . '/includes/dmGetDublinCoreFieldInfo.json';
    $json = file_get_contents($path_to_file);
    drupal_add_http_header('Content-Type', 'application/json; utf-8');
    print $json;
  }
}

/**
 * CONTENTdm API callback.
 *
 * NOte: This function only provides JSON output.
 *
 * @param array $params
 *   An array containing the alias and format.
 */
function islandora_cdm_api_dmgetcollectionfieldinfo(array $params) {
  $alias = trim($params[0]);
  // SFU Library's convention for collection objects is to use the CONTENTdm
  // alias as the namespace, and the string 'collection' as the rest
  // of the PID.
  if ($object = islandora_object_load($alias . ':collection')) {
    $ds = $object['CDMFIELDINFO'];
    drupal_add_http_header('Content-Type', 'application/json');
    print $ds->content;
  }
  else {
    // This is what CONTENTdm provides as a content type and response body.
    drupal_add_http_header('Content-Type', 'text/html; charset=UTF-8');
    print 'Error looking up collection /' . $alias . '<br>';
  }
}

/**
 * CONTENTdm API callback.
 *
 * Note: This function does not populate the 'path' data
 * and always returns '2' or '-2' in 'rc'.
 *
 * @param array $params
 *   An array containing the alias and format.
 */
function islandora_cdm_api_dmgetcollectionparameters(array $params) {
  $alias = trim($params[0]);
  if ($object = islandora_object_load($alias . ':collection')) {
    if ($params[1] == 'xml') {
      drupal_add_http_header('Content-Type', 'text/xml');
      print '<?xml version="1.0" encoding="UTF-8"?><parameters><rc>2</rc><name>' .
        $object->label . '</name><path></path></parameters>';
    }
    if ($params[1] == 'json') {
      drupal_add_http_header('Content-Type', 'application/json');
      $cp = array(
        'rc' => 2,
        'name' => $object->label,
        'path' => '',
      );
      $json = json_encode($cp);
      print $json;
    }
  }
  else {
    if ($params[1] == 'xml') {
      drupal_add_http_header('Content-Type', 'text/xml');
      print '<?xml version="1.0" encoding="UTF-8"?><parameters><rc>-2</rc><name></name><path></path></parameters>';
    }
    if ($params[1] == 'json') {
      $cp = array(
        'rc' => -2,
        'name' => 'null',
        'path' => 'null',
      );
      $json = json_encode($cp);
      drupal_add_http_header('Content-Type', 'application/json');
      print $json;
    }
  }
}

/**
 * CONTENTdm API callback.
 *
 * NOte: This function only provides XML output.
 *
 * @param array $params
 *   An array containing the alias, pointer and format from the URL.
 */
function islandora_cdm_api_dmgetcompoundobjectinfo(array $params) {
  $xml_error = '<?xml version="1.0" encoding="UTF-8"?><error><code>-2</code>' .
    '<message>Requested item is not compound</message></error>';
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  $pid = islandora_cdm_api_map_request_to_pid($params[0], $params[1]);
  drupal_add_http_header('Content-Type', 'text/xml');
  if ($object = islandora_object_load($pid)) {
    if (isset($object['MODS'])) {
      // Get the JSON contained within the <dmGetCompoundObjectInfo>
      // extension element.
      $dom = new DOMDocument();
      $dom->loadXML($object['MODS']->content);
      $cdm_compound_item_info = $dom->getElementsByTagName('dmGetCompoundObjectInfo');
      if ($cdm_compound_item_info->length) {
        print trim($cdm_compound_item_info->item(0)->nodeValue);
      }
      else {
        print $xml_error;
      }
    }
    else {
      print $xml_error;
    }
  }
  else {
    print $xml_error;
  }
}

/**
 * CONTENTdm API callback.
 *
 * @param array $params
 *   An array containing the alias, pointer and format.
 */
function islandora_cdm_api_dmgetimageinfo(array $params) {
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  if (!$islandora_object_pid = islandora_cdm_api_map_request_to_pid($params[0], $params[1])) {
    print '<?xml version="1.0" encoding="UTF-8"?><error>Record does not exist</error>';
    drupal_exit();
  }
  // Contrary to the API documentation, CONTENTdm returns this error XML
  // if you ask for 'json'.
  if ($params[2] == 'json') {
    print '<?xml version="1.0" encoding="UTF-8"?><error>Record does not exist</error>';
    drupal_exit();
  }
  $object = islandora_object_load($islandora_object_pid);
  $object_cmodels = $object->models;
  // The object must have one of these content models.
  if ($object_cmodels[0] == 'islandora:sp_basic_image') {
    $dsid = 'OBJ';
  }
  // This approach prefers JPG2, then JPG, then OBJ.
  elseif ($object_cmodels[0] == 'islandora:sp_large_image_cmodel') {
    if (isset($object['JP2'])) {
      $dsid = 'JP2';
    }
    elseif (isset($object['JPG'])) {
      $dsid = 'JPG';
    }
    elseif (isset($object['OBJ'])) {
      $dsid = 'OBJ';
    }
    else {
      // @todo: drupal_not_found ?
    }
  }
  // For non-image content models.
  else {
    $xml = new XMLWriter();
    $xml->openMemory();
    $xml->startDocument('1.0', 'UTF-8');
    $xml->startElement('imageinfo');
    $xml->writeElement('filename', '');
    $xml->writeElement('type', '');
    $xml->writeElement('width', 0);
    $xml->writeElement('height', 0);
    $xml->writeElement('title', $object->label);
    $xml->endElement();
    drupal_add_http_header('Content-Type', 'text/xml; utf-8');
    print $xml->outputMemory();
    drupal_exit();
  }

  // Get the image datastream content and save it to a file.
  $mimetype = $object[$dsid]->mimetype;
  $image_path = islandora_cdm_api_get_cached_image_uri($islandora_object_pid, $dsid, $mimetype);
  file_unmanaged_save_data($object[$dsid]->content, $image_path, FILE_EXISTS_REPLACE);
  $real_path = drupal_realpath($image_path);
  $info = image_get_info($real_path);
  if (empty($info)) {
    // @todo: Figure out what to return if the info is not availble.
  }
  // file_unmanaged_delete($real_path);
  $xml = new XMLWriter();
  $xml->openMemory();
  $xml->startDocument('1.0', 'UTF-8');
  $xml->startElement('imageinfo');
  $xml->writeElement('filename', '');
  $xml->writeElement('type', $info['extension']);
  $xml->writeElement('width', $info['width']);
  $xml->writeElement('height', $info['height']);
  $xml->writeElement('title', $object->label);
  $xml->endElement();
  drupal_add_http_header('Content-Type', 'text/xml; utf-8');
  print $xml->outputMemory();
}

/**
 * CONTENTdm API callback.
 *
 * Note that this module only supports the JSON response format.
 *
 * @param array $params
 *   An array containing the alias, pointer and format.
 */
function islandora_cdm_api_dmgetiteminfo(array $params) {
  if ($params[2] == 'xml') {
    drupal_add_http_header('Content-Type', 'text/xml; utf-8');
    print '<?xml version="1.0" encoding="UTF-8"?>' .
      '<error>Sorry, output for dmGetItemInfo is not available in xml</error><xml>';
    drupal_exit();
  }
  drupal_add_http_header('Content-Type', 'application/json');
  $json_error = '{"code":"-2","message":"Requested item not found","restrictionCode":"-1"}';
  if ($islandora_object_pid = islandora_cdm_api_map_request_to_pid($params[0], $params[1])) {
    if ($islandora_object = islandora_object_load($islandora_object_pid)) {
      if (isset($islandora_object['MODS'])) {
        // Get the JSON contained within the <cdmiteminfo> extension element.
        $dom = new DOMDocument();
        $dom->loadXML($islandora_object['MODS']->content);
        $cdm_item_info = $dom->getElementsByTagName('dmGetItemInfo');
        if ($cdm_item_info->length) {
          print trim($cdm_item_info->item(0)->nodeValue);
        }
        else {
          print $json_error;
        }
      }
      else {
        print $json_error;
      }
    }
    else {
      print $json_error;
    }
  }
  else {
    print $json_error;
  }
}

/**
 * CONTENTdm API callback.
 *
 * @param array $params
 *   An array containing the alias, searchstrings, fields,
 *   sortby, maxrecs, start, suppress, docptr, suggest,
 *   facets, showunpub, denormalizedFacets, and format.
 */
function islandora_cdm_api_dmquery(array $params) {
  // $alias = '', $searchstrings = '', $fields = '', $sortby = '',
  // $maxrecs = '1024', $start = '0', $supress = '0', $docptr = '0',
  // $suggest = '0', $facets = '0', $showunpub = '0', $denormalizedFacets = '0',
  // $format = 'json'.
}

/**
 * CONTENTdm API callback.
 *
 * @param array $params
 *   An array containing the alias, pointer and format.
 */
function islandora_cdm_api_getitemdmmodified(array $params) {
  if ($params[2] == 'xml') {
    drupal_add_http_header('Content-Type', 'text/xml; utf-8');
    print '<?xml version="1.0" encoding="UTF-8"?>' .
      '<error>Sorry, output for dmGetItemDmmodified is not available in xml</error><xml>';
    drupal_exit();
  }
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  if ($islandora_object_pid = islandora_cdm_api_map_request_to_pid($params[0], $params[1])) {
    $object = islandora_object_load($islandora_object_pid);
    $islandora_last_modified = (string) $object->lastModifiedDate;
    // Fedora provides 2015-09-29T05:39:12.726Z but CONTENTdm
    // returns 2015-09-29.
    $cdm_last_modified = preg_replace('/T.*$/', '', $islandora_last_modified);
    $output = array('0', $cdm_last_modified);
    drupal_json_output($output);
  }
  else {
    // Despite what OCLC's documentation for GetItemDmmodified says,
    // if the object is not found, this call returns a 200 with
    // JSON content type, and the non-JSON string 'null'.
    drupal_add_http_header('Content-Type', 'application/json');
    print 'null';
  }
}

/**
 * CONTENTdm API callback.
 *
 * @param array $params
 *   An array containing the alias, pointer and format.
 */
function islandora_cdm_api_getparent(array $params) {
  // CONTENTdm doesn't return a 404 if the object doesn't exist.
  if ($params[2] == 'xml') {
    drupal_add_http_header('Content-Type', 'text/xml');
    $error_message = '<?xml version="1.0" encoding="UTF-8"?><parent>-1</parent>';
  }
  if ($params[2] == 'json') {
    drupal_add_http_header('Content-Type', 'application/json');
    $error_message = '{"parent":-1}';
  }

  // Load the object's MODS datastream and get the value of the <parent>
  // element, if there is one.
  if ($child_pid = islandora_cdm_api_map_request_to_pid($params[0], $params[1])) {
    if ($child_object = islandora_object_load($child_pid)) {
      // Load the object's MODS datastream, then check to see if there's
      // a value in the <parent> element.
      if (isset($child_object['MODS'])) {
        $dom = new DOMDocument();
        $dom->loadXML($child_object['MODS']->content);
        $xpath = new DOMXpath($dom);
        $xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
        $xpath_expression = '//mods:extension/mods:CONTENTdmData/mods:GetParent';
        $get_parent = $xpath->query($xpath_expression);
        if ($get_parent->length) {
          $get_parent_xml = trim($get_parent->item(0)->nodeValue);
          if ($params[2] == 'xml') {
            print $get_parent_xml;
          }
          if ($params[2] == 'json') {
            // Parse out the value of the pointer from the stored XML. The
            // parent pointer is stored in XML, specifically, $get_parent_xml.
            $parent_pointer_dom = new DOMDocument();
            $parent_pointer_dom->loadXML($get_parent_xml);
            $parent_pointer = $parent_pointer_dom->getElementsByTagName('parent');
            if ($parent_pointer->length) {
              print '{"parent":' . $parent_pointer->item(0)->nodeValue . '}';
            }
            else {
              print $error_message;
            }
          }
        }
        else {
          print $error_message;
        }
      }
      else {
        print $error_message;
      }
    }
    else {
      print $error_message;
    }
  }
  else {
    print $error_message;
  }
}

/**
 * CONTENTdm API callback.
 *
 * @param string $alias
 *   The CONTENTdm alias.
 * @param string $pointer
 *   The CONTENTdm pointer.
 * @param string $filename
 *   The filename that will be used to for the downloaded file.
 *
 * @todo: Which DSID do we choose if the object has no OBJ?
 */
function islandora_cdm_api_getfile($alias, $pointer, $filename) {
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  islandora_cdm_api_log_requests(current_path());
  if (!$islandora_object_pid = islandora_cdm_api_map_request_to_pid($alias, $pointer)) {
    drupal_not_found();
  }
  $object = islandora_object_load($islandora_object_pid);
  if (isset($object['OBJ'])) {
    $disposition = 'attachment; filename=' . $filename;
    drupal_add_http_header('Content-disposition', $disposition);
    drupal_add_http_header('Content-Type', 'Application/octet-stream');
    drupal_add_http_header('Content-Length', $object['OBJ']->size);
    drupal_add_http_header('Content-description', $filename);
    print $object['OBJ']->content;
  }
}

/**
 * CONTENTdm API callback.
 *
 * GetImage uses $_GET, not menu arguments.
 *
 * Note: Cdm sends a Transfer-Encoding: chunked header, with no
 * content-length, for images. @todo: Check this for file and stream as well.
 */
function islandora_cdm_api_getimage() {
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  islandora_cdm_api_log_requests(current_path());
  $params = drupal_get_query_parameters();
  if (!$islandora_object_pid = islandora_cdm_api_map_request_to_pid($params['CISOROOT'], $params['CISOPTR'])) {
    // If the alias or pointer is invalid (i.e., object doesn't exist),
    // CONTENTdm returns a 200 with a Content-Length header with value 0.
    drupal_add_http_header('Content-Length', 0);
    print '';
    drupal_exit();
  }
  if (!$object = islandora_object_load($islandora_object_pid)) {
    drupal_add_http_header('Content-Length', 0);
    print '';
    drupal_exit();
  }

  $cmodels = $object->models;
  switch ($cmodels[0]) {
    case 'islandora:sp_basic_image';
      $dsid = 'OBJ';
      break;

    case 'islandora:sp_large_image_cmodel';
      $dsid = 'JPG';
      break;

    case 'islandora:pageCModel';
      $dsid = 'JPG';
      break;

    default:
      // CONTENTdm returns a 0-length body when the object has no image.
      drupal_add_http_header('Content-Length', 0);
      print '';
  }

  $mimetype = $object[$dsid]->mimetype;
  $image_path = islandora_cdm_api_get_cached_image_uri($islandora_object_pid, $dsid, $mimetype);
  $real_image_path = drupal_realpath($image_path);
  if (!file_exists($real_image_path)) {
    file_unmanaged_save_data($object[$dsid]->content, $image_path, FILE_EXISTS_REPLACE);
  }
  $full_size_image = image_load($real_image_path);
  // If the request is for the full-sized image, don't resize it,
  // just send the existing image to the client.
  if (($params['DMSCALE'] == '100') &&
    ($params['DMWIDTH'] == $full_size_image->info['width']) &&
    ($params['DMHEIGHT'] == $full_size_image->info['height'])) {
    drupal_add_http_header('Content-Length', $full_size_image->info['file_size']);
    drupal_add_http_header('Content-Type', $full_size_image->info['mime_type']);
    readfile($full_size_image->source);
    drupal_exit();
  }
  // If it's not, resize it and send to client.
  else {
    $pixel_dimensions = islandora_cdm_api_get_resize_values($full_size_image, $params);
    $resized_image = image_load($real_image_path);
    image_imagemagick_resize($resized_image, $pixel_dimensions['width'], $pixel_dimensions['height']);
    $resized_image_path = $image_path . '.' . drupal_random_key(5);
    image_save($resized_image, $resized_image_path);
    drupal_add_http_header('Content-Length', $resized_image->info['file_size']);
    drupal_add_http_header('Content-Type', $resized_image->info['mime_type']);
    readfile($resized_image_path);
    // Delete modified image file from ISLANDORA_CDM_API_CACHE_DIR.
    // file_unmanaged_delete($image_path);
    drupal_exit();
  }
}

/**
 * CONTENTdm API callback.
 *
 * @param string $alias
 *   The CONTENTdm alias.
 * @param string $pointer
 *   The CONTENTdm pointer.
 */
function islandora_cdm_api_getstream($alias, $pointer) {
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  islandora_cdm_api_log_requests(current_path());
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  if (!$islandora_object_pid = islandora_cdm_api_map_request_to_pid($alias, $pointer)) {
    // CONTENTdm returns a 302 Found and redirects to /cdm/error/errno/6
    // which returns a 404.
    drupal_not_found();
  }
  $object = islandora_object_load($islandora_object_pid);
  // Formats supported by Islandora's Video Solution Pack.
  if (isset($object['OGG'])) {
    $dsid = 'OGG';
    $mimetype = 'video/ogg';
  }
  if (isset($object['MKV'])) {
    $dsid = 'MKV';
    $mimetype = 'video/x-matroska';
  }
  if (isset($object['MP4'])) {
    $dsid = 'MP4';
    $mimetype = 'video/mp4';
  }
  // Formats supported by Islandora's Audio Solution Pack.
  if (isset($object['PROXY_MP3'])) {
    $dsid = 'PROXY_MP3';
    $mimetype = 'audio/mpeg';
  }
  drupal_add_http_header('Content-Type', $mimetype);
  drupal_add_http_header('Content-Length', $object[$dsid]->size);
  print $object[$dsid]->content;
}

/**
 * CONTENTdm API callback.
 *
 * @param string $alias
 *   The CONTENTdm alias.
 * @param string $pointer
 *   The CONTENTdm pointer.
 */
function islandora_cdm_api_getthumbnail($alias, $pointer) {
  module_load_include('inc', 'islandora_cdm_api', 'includes/utilities');
  islandora_cdm_api_log_requests(current_path());
  if ($islandora_object_pid = islandora_cdm_api_map_request_to_pid($alias, $pointer)) {
    module_load_include('inc', 'islandora', 'includes/datastream');
    // Load the Islandora object.
    $object = islandora_object_load($islandora_object_pid);
    // Get its TN datastream and return its content to client.
    $tn = islandora_datastream_load('TN', $object);
    islandora_download_datastream($tn);
  }
  else {
    print '<?xml version="1.0" encoding="UTF-8"?><error>Record does not exist</error>';
  }
}
