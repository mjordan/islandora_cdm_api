<?php

/**
 * @file
 * Attempts to ingest some image into a randomly generated image collection
 * and perform lookups on their CONTENTdm URLs.
 */

class IslandoraCdmApiTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'CONTENTdm API tests',
      'description' => 'Tests basic functionality of the Islandora CONTENTdm API',
      'group' => 'Islandora CONTENTdm API',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_basic_image',
      'islandora_basic_collection',
      'islandora_solr',
      'islandora_cdm_api',
    ));
  }

  /**
   * Ingests objects that we use in our CONTENTdm API tests.
   */
  public function testIngestObjects() {
    $user = $this->drupalCreateUser(array_keys(module_invoke_all('permission')));
    $this->drupalLogin($user);

    // Attempts to create collection.
    $collection_pid = 'islandora:cdm_api_test_collection';
    $this->createTestCollection('Test collection', 'islandora:sp_basic_image', $collection_pid);

    $test_file_basenames = array('image1', 'image2', 'image3');
    foreach ($test_file_basenames as $basename) {
      // Attempts to create an object with an image file.
      $path = 'islandora/object/' . $collection_pid . '/manage/overview/ingest';
      $image_file = drupal_get_path('module', 'islandora_cdm_api') . '/tests/fixtures/' . $basename . '.jpg';
      $image_handle = fopen($image_file, "r");
      $contents = fread($image_handle, filesize($image_file));
      fclose($image_handle);
      $edit = array(
        'files[file]' => $image_file,
      );
      $this->drupalPost($path, $edit, t('Ingest'));
      $this->assertText('New Object', 'Image object was created', 'Islandora');
      $path = $this->url;
      $image_path = $path . '/datastream/OBJ/view';
      $this->assertLinkByHref($image_path, 0, t('Ingested image found on view page'), t('Islandora'));

      // Attempts to upload a MODS datastream for the object.
      $mods_upload_path = $path . '/manage/datastreams/add';
      $mods_file = drupal_get_path('module', 'islandora_cdm_api') . '/tests/fixtures/' . $basename . '.xml';
      $mods_handle = fopen($mods_file, "r");
      $contents = fread($mods_handle, filesize($mods_file));
      fclose($mods_handle);
      $edit = array(
        'dsid' => 'MODS',
        'label' => 'MODS record',
        'files[file]' => $mods_file,
      );
      $this->drupalPost($mods_upload_path, $edit, t('Add Datastream'));

      $mods_path = $this->url . '/datastream/MODS/view';
      $this->drupalGet($mods_path);
      $this->assertResponse(200, 'Response to MODS path is OK');
      $this->assertPattern('|titleInfo|');
    }

    // Test GetItemDmmodified API call. drupalGet uses url()'s query syntax.
    $this->drupalGet('cdm_api', array('c' => 'dmGetDublinCoreFieldInfo/xml'));
    $this->assertResponse(200, 'Response OK');
    $match = preg_match('|Identifier|', $this->drupalGetContent());
    $this->assertTrue($match, 'Pattern |Identifier| found');

    watchdog('islandora_cdm_api', "drupalGetContent is: %dgc", array('%dgc' => $this->drupalGetContent()));

    $this->drupalGetContent('cdm_api', array('c' => 'dmGetDublinCoreFieldInfo/json'));
    $this->assertResponse(200, 'Response OK');
    $this->assertPattern('|Identifier|');

    // Test GetItemDmmodified API call.
    $this->drupalGet('cdm_api', array('c' => 'GetItemDmmodified/testcoll1/100/json'));
    $this->assertPattern('|\d\d\d\d\|', 'Date is present');

    $this->drupalGet('cdm_api', array('c' => 'GetItemDmmodified/testcoll2/200/json'));
    $this->assertPattern('|\d\d\d\d\|', 'Date is present');

    $this->drupalGet('cdm_api', array('c' => 'GetItemDmmodified/testcoll3/300/json'));
    $this->assertPattern('|\d\d\d\d\|', 'Date is present');

    $this->drupalGet('cdm_api', array('c' => 'GetItemDmmodified/testcoll3/300/xml'));
    $this->assertPattern('|Sorry,\soutput\sfor\sdmGetItemDmmodified|',
      'XML error message is present');

    // Test dmGetImageInfo API call.
    $this->drupalGet('cdm_api', array('c' => 'dmGetImageInfo/testcoll1/100/xml'));
    $this->assertPattern('|<width>\d+</width>|', 'Image width is present');

    $this->drupalGet('cdm_api', array('c' => 'dmGetImageInfo/testcoll2/200/xml'));
    $this->assertPattern('|<width>\d+</width>|', 'Image width is present');

    $this->drupalGet('cdm_api', array('c' => 'dmGetImageInfo/testcoll3/300/xml'));
    $this->assertPattern('|<width>\d+</width>|', 'Image width is present');

    // Test GetThumbnail API call.
    $this->drupalGet('cdm_api/utils/getthumbnail/collection/testcoll1/id/100');
    $this->assertResponse(200, 'Response OK');
    $header1 = $this->drupalGetHeader('Content-Type');
    $this->assertEqual($header1, 'image/jpeg', 'Content-Type header on thumbnail is image/jpeg');

    $this->drupalGet('cdm_api/utils/getthumbnail/collection/testcoll2/id/200');
    $this->assertResponse(200, 'Response OK');
    $header2 = $this->drupalGetHeader('Content-Type');
    $this->assertEqual($header2, 'image/jpeg', 'Content-Type header on thumbnail is image/jpeg');

    $this->drupalGet('cdm_api/utils/getthumbnail/collection/testcoll3/id/300');
    $this->assertResponse(200, 'Response OK');
    $header3 = $this->drupalGetHeader('Content-Type');
    $this->assertEqual($header3, 'image/jpeg', 'Content-Type header on thumbnail is image/jpeg');

    // Test getfile utility call.
    $this->drupalGet('cdm_api/utils/getfile/collection/testcoll1/id/100/filename/foo.jpg');
    $this->assertResponse(200, 'Response OK');
    $header1 = $this->drupalGetHeader('Content-Type');
    $this->assertEqual($header1, 'Application/octet-stream');

    $this->drupalGet('cdm_api/utils/getfile/collection/testcoll2/id/200/filename/foo.jpg');
    $this->assertResponse(200, 'Response OK');
    $header2 = $this->drupalGetHeader('Content-Type');
    $this->assertEqual($header2, 'Application/octet-stream');

    $this->drupalGet('cdm_api/utils/getfile/collection/testcoll3/id/300/filename/foo.jpg');
    $this->assertResponse(200, 'Response OK');
    $header3 = $this->drupalGetHeader('Content-Type');
    $this->assertEqual($header3, 'Application/octet-stream');
  }
}
