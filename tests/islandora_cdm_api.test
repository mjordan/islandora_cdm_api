<?php

/**
 * @file
 * Attempts sample objects and test the CONTENTdm API methods.
 */

class IslandoraCdmApiTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'CONTENTdm API tests',
      'description' => 'Tests basic functionality of the Islandora CONTENTdm API',
      'group' => 'Islandora CONTENTdm API',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_basic_image',
      'islandora_basic_collection',
      'islandora_solr',
      'islandora_cdm_api',
    ));

    // Ingest test objects.
    $user = $this->drupalCreateUser(array_keys(module_invoke_all('permission')));
    $this->drupalLogin($user);

    $collection_pid = 'mycollection:collection';
    $this->createTestCollection('My Test Collection', 'islandora:sp_basic_image', $collection_pid);

    $tuque = islandora_get_tuque_connection();

    // Add CDMFIELDINFO datastream to the collection object.
    $cdmfieldinfo_file = drupal_get_path('module', 'islandora_cdm_api') . '/tests/fixtures/CDMFIELDINFO.json';
    $coll_object = $tuque->repository->getObject($collection_pid);
    $cdmfieldinfo_ds = $coll_object->constructDatastream('CDMFIELDINFO');
    $cdmfieldinfo_ds->label = 'CONTENTdm field info';
    $cdmfieldinfo_ds->setContentFromFile($cdmfieldinfo_file);
    $cdmfieldinfo_ds->mimetype = "application/json";
    $coll_object->ingestDatastream($cdmfieldinfo_ds);

    // Create basic image test objects.
    $test_file_basenames = array('image1', 'image2', 'image3');
    foreach ($test_file_basenames as $basename) {
      // Attempts to create an object with an image file.
      $path = 'islandora/object/' . $collection_pid . '/manage/overview/ingest';
      $image_file = drupal_get_path('module', 'islandora_cdm_api') . '/tests/fixtures/' . $basename . '.jpg';
      $image_handle = fopen($image_file, "r");
      $contents = fread($image_handle, filesize($image_file));
      fclose($image_handle);
      $edit = array(
        'files[file]' => $image_file,
      );
      $this->drupalPost($path, $edit, t('Ingest'));
      $this->assertText('New Object', 'Image object was created', 'Islandora');
      $object_path = $this->url;
      $image_path = $object_path . '/datastream/OBJ/view';
      $this->assertLinkByHref($image_path, 0, t('Ingested image found on view page'), t('Islandora'));

      // Add a MODS datastream to the object.
      $mods_upload_path = $object_path . '/manage/datastreams/add';
      $mods_file = drupal_get_path('module', 'islandora_cdm_api') . '/tests/fixtures/' . $basename . '.xml';
      $mods_handle = fopen($mods_file, "r");
      $contents = fread($mods_handle, filesize($mods_file));
      fclose($mods_handle);
      $edit = array(
        'dsid' => 'MODS',
        'label' => 'MODS record',
        'files[file]' => $mods_file,
      );
      $this->drupalPost($mods_upload_path, $edit, t('Add Datastream'));

      // Add a CDMCPD datastream to the object. These aren't compound objects,
      // but we'll add a CDMCPD datastream to each so we can test
      // dmGetCompoundObjectInfo.
      $cpd_upload_path = $object_path . '/manage/datastreams/add';
      $cpd_file = drupal_get_path('module', 'islandora_cdm_api') . '/tests/fixtures/' . $basename . '.CDMCPD.xml';
      $cpd_handle = fopen($cpd_file, "r");
      $contents = fread($cpd_handle, filesize($cpd_file));
      fclose($cpd_handle);
      $edit = array(
        'dsid' => 'CDMCPD',
        'label' => 'CONTENTdm compound object info',
        'files[file]' => $cpd_file,
      );
      $this->drupalPost($cpd_upload_path, $edit, t('Add Datastream'));

      // Confirm the MODS datastream was ingested.
      $mods_path = $object_path . '/datastream/MODS/view';
      $this->drupalGet($mods_path);
      $this->assertResponse(200, 'Response to MODS path is OK');
      $this->assertPattern('|titleInfo|');

      // Confirm the CDMCPD datastream was ingested.
      $cpd_path = $object_path . '/datastream/CDMCPD/view';
      $this->drupalGet($cpd_path);
      $this->assertResponse(200, 'Response to CDMCPD path is OK');
      $this->assertPattern('|Page|');
    }
  }

  /**
   * Test the CONTENTdm API emulation methods.
   */
  public function testApi() {
    // Test GetItemDmmodified API call. drupalGet uses url()'s query syntax.
    $this->drupalGet('cdm_api', array('query' => array('c' => 'dmGetDublinCoreFieldInfo/xml')));
    $this->assertResponse(200, 'Response OK');
    $match = preg_match('|Identifier|', $this->drupalGetContent());
    $this->assertTrue($match, 'Pattern |Identifier| found');

    $this->drupalGet('cdm_api', array('query' => array('c' => 'dmGetDublinCoreFieldInfo/json')));
    $this->assertResponse(200, 'Response OK');
    $this->assertPattern('|Identifier|');

    // Test dmGetCollectionFieldInfo API call.
    $this->drupalGet('cdm_api', array('query' => array('c' => 'dmGetCollectionFieldInfo/mycollection/json')));
    $this->assertResponse(200, 'Response OK');
    $this->assertPattern('|Title|');

    // Test dmGetCollectionParameters API call.
    $this->drupalGet('cdm_api', array('query' => array('c' => 'dmGetCollectionParameters/mycollection/xml')));
    $this->assertResponse(200, 'Response OK');
    $this->assertPattern('|My Test Collection|');

    $this->drupalGet('cdm_api', array('query' => array('c' => 'dmGetCollectionParameters/mycollection/json')));
    $this->assertResponse(200, 'Response OK');
    $this->assertPattern('|My Test Collection|');

    // Test dmGetCompoundObjectInfo API call for object that was migrated from
    // http://contentdm.example.com/cdm/ref/collection/testcoll1/id/100.
    // http://contentdm.example.com/cdm/ref/collection/testcoll2/id/200.
    // http://contentdm.example.com/cdm/ref/collection/testcoll3/id/300.
    $original_cdm_ids = array(
      array('testcoll1', '100'),
      array('testcoll2', '200'),
      array('testcoll3', '300'),
    );
    foreach ($original_cdm_ids as $ids) {
      $this->drupalGet('cdm_api', array(
        'query' => array('c' => 'dmGetCompoundObjectInfo/' . $ids[0] . '/' . $ids[1] . '/xml')));
      $this->assertResponse(200, 'Response OK');
      // Check for the Cdm object's 'pointer' in the CPD datastream's output.
      $this->assertPattern("|$ids[1]|");
    }
  }

}
